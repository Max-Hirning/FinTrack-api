generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  admin
  user
  guest
}

enum Periods {
  oneTime
  year
  month
  week
}

enum FileTypes {
  pdf
  png
}

enum Currencies {
  AUD
  CAD
  CHF
  EUR
  GBP
  JPY
  PLN
  UAH
  USD
}

enum CategoryType {
  income
  outcome
}

model Otp {
  id        String   @id @default(uuid())
  otp       String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  lastName           String
  firstName          String
  password           String
  loanNotification   Boolean        @default(true)
  budgetNotification Boolean        @default(true)
  goalNotification   Boolean        @default(true)
  dateOfBirth        DateTime       @default(now()) @db.Date
  role               Roles          @default(guest)
  currency           Currencies     @default(USD)
  images             File[]
  otps               Otp[]
  refreshTokens      RefreshToken[]
  cards              Card[]
  categories         Category[]
  budgets            Budget[]
  goals              Goal[]
  loans              Loan[]
  notifiactions      Notification[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model File {
  id        String    @id @default(uuid())
  url       String
  type      FileTypes
  fileId    String
  userId    String
  users     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Card {
  id           String        @id @default(uuid())
  title        String
  balance      Float
  currency     Currencies
  startBalance Float
  color        String
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgets      Budget[]      @relation("BudgetCard")
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Goal {
  id            String         @id @default(uuid())
  title         String
  amount        Float
  balance       Float          @default(0)
  currency      Currencies
  deadline      DateTime
  description   String
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Loan {
  id            String         @id @default(uuid())
  title         String
  amount        Float
  balance       Float          @default(0)
  deadline      DateTime
  currency      Currencies
  date          DateTime
  description   String
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Budget {
  id            String         @id @default(uuid())
  title         String
  balance       Float
  amount        Float
  currency      Currencies
  period        Periods
  startDate     DateTime
  endDate       DateTime
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories    Category[]     @relation("BudgetCategory")
  cards         Card[]         @relation("BudgetCard")
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Category {
  id           String        @id @default(uuid())
  title        String
  image        String
  color        String
  type         CategoryType
  userId       String?
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgets      Budget[]      @relation("BudgetCategory")
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgetId  String?
  budget    Budget?  @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  loanId    String?
  loan      Loan?    @relation(fields: [loanId], references: [id], onDelete: Cascade)
  goalId    String?
  goal      Goal?    @relation(fields: [goalId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String   @id @default(uuid())
  date        DateTime
  amount      Float
  loanAmount  Float?
  goalAmount  Float?
  description String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  cardId      String
  card        Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  goalId      String?
  goal        Goal?    @relation(fields: [goalId], references: [id])
  loanId      String?
  loan        Loan?    @relation(fields: [loanId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  uuid      String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
